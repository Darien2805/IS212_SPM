name: Continuous Integration (CI)

on:
  push:
    branches:
      # We can define multiple branches as well      
      - main
  pull_request:
    branches:
      - main
      
jobs:
  build:
    # Defines the type of runner the job runs on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      # - name: run npm CI
      #   working-directory: ./app
      #   run: npm ci
      - name: do a package install
        working-directory: ./frontend
        run: npm install

      - name: run Tests
        working-directory: ./frontend
        run: npm test
     
      - name: run build
        working-directory: ./frontend
        run: npm run build --if-present


      #  - name: Setup Symfony
      #   working-directory: ./app
      #   run: cp .env.dev .env
    # steps:
    #   - name: Checkout to the repository
    #     uses: actions/checkout@v2
        
    #   - name: Set up NodeJS environment
    #     uses: actions/setup-node@v2
    #     with:
    #       # Reads the node version from the .nvmrc file itself 
    #       # node-version-file: '.nvmrc'
    #       # The node version can be hard-coded 
    #       # node-version: 14
    #         node-version: '16'
    #         cache: 'npm'
        
    #   # Consider this as an add on to optimize the execution of actions
    #   # - name: Cache node modules
    #   #   id: cache-npm
    #   #   uses: actions/cache@v3
    #   #   env:
    #   #     cache-name: cache-node-modules
    #   #   with:
    #   #     # npm cache files are stored in `~/.npm` on Linux/macOS
    #   #     path: ~/.npm
    #   #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    #   #     restore-keys: |
    #   #       ${{ runner.os }}-build-${{ env.cache-name }}-
    #   #       ${{ runner.os }}-build-
    #   #       ${{ runner.os }}-
       
    #   - name: Install package dependencies
    #     run: npm install
      
    #   - name: Check linting and formatting
    #     # Custom script for checking the linting and formatting being in place
    #     run: npm run lint
      
    #   # Run test cases and this could ensure minimum coverage as well if set
    #   - name: Execute test cases
    #     run: npm run test
        
    #   - name: Create test build
    #     run: npm run build
      